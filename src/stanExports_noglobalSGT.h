// Generated by rstantools.  Do not edit by hand.

/*
    rstanarm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanarm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanarm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_noglobalSGT_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 168> locations_array__ =
  {" (found before start of program)",
  " (in 'noglobalSGT', line 33, column 2 to column 21)",
  " (in 'noglobalSGT', line 33, column 22 to column 37)",
  " (in 'noglobalSGT', line 34, column 1 to column 36)",
  " (in 'noglobalSGT', line 35, column 1 to column 21)",
  " (in 'noglobalSGT', line 36, column 1 to column 29)",
  " (in 'noglobalSGT', line 37, column 1 to column 30)",
  " (in 'noglobalSGT', line 38, column 1 to column 27)",
  " (in 'noglobalSGT', line 39, column 1 to column 28)",
  " (in 'noglobalSGT', line 40, column 1 to column 37)",
  " (in 'noglobalSGT', line 41, column 1 to column 16)",
  " (in 'noglobalSGT', line 42, column 1 to column 36)",
  " (in 'noglobalSGT', line 43, column 1 to column 31)",
  " (in 'noglobalSGT', line 44, column 1 to column 30)",
  " (in 'noglobalSGT', line 45, column 1 to column 27)",
  " (in 'noglobalSGT', line 46, column 1 to column 34)",
  " (in 'noglobalSGT', line 49, column 1 to column 56)",
  " (in 'noglobalSGT', line 50, column 1 to column 22)",
  " (in 'noglobalSGT', line 51, column 1 to column 23)",
  " (in 'noglobalSGT', line 52, column 1 to column 27)",
  " (in 'noglobalSGT', line 53, column 1 to column 13)",
  " (in 'noglobalSGT', line 54, column 1 to column 27)",
  " (in 'noglobalSGT', line 55, column 1 to column 38)",
  " (in 'noglobalSGT', line 56, column 1 to column 19)",
  " (in 'noglobalSGT', line 57, column 1 to column 12)",
  " (in 'noglobalSGT', line 58, column 1 to column 16)",
  " (in 'noglobalSGT', line 59, column 1 to column 16)",
  " (in 'noglobalSGT', line 64, column 2 to column 21)",
  " (in 'noglobalSGT', line 62, column 2 to column 33)",
  " (in 'noglobalSGT', line 61, column 1 to line 64, column 21)",
  " (in 'noglobalSGT', line 77, column 3 to column 19)",
  " (in 'noglobalSGT', line 76, column 2 to line 77, column 19)",
  " (in 'noglobalSGT', line 78, column 2 to column 21)",
  " (in 'noglobalSGT', line 75, column 9 to line 79, column 2)",
  " (in 'noglobalSGT', line 67, column 2 to column 12)",
  " (in 'noglobalSGT', line 69, column 3 to column 32)",
  " (in 'noglobalSGT', line 68, column 2 to line 69, column 32)",
  " (in 'noglobalSGT', line 71, column 3 to column 42)",
  " (in 'noglobalSGT', line 70, column 27 to line 73, column 3)",
  " (in 'noglobalSGT', line 70, column 2 to line 73, column 3)",
  " (in 'noglobalSGT', line 74, column 2 to column 26)",
  " (in 'noglobalSGT', line 66, column 25 to line 75, column 2)",
  " (in 'noglobalSGT', line 66, column 1 to line 79, column 2)",
  " (in 'noglobalSGT', line 80, column 1 to column 22)",
  " (in 'noglobalSGT', line 81, column 1 to column 25)",
  " (in 'noglobalSGT', line 82, column 1 to column 25)",
  " (in 'noglobalSGT', line 87, column 3 to column 26)",
  " (in 'noglobalSGT', line 85, column 3 to column 38)",
  " (in 'noglobalSGT', line 84, column 1 to line 87, column 26)",
  " (in 'noglobalSGT', line 89, column 1 to column 68)",
  " (in 'noglobalSGT', line 90, column 1 to column 18)",
  " (in 'noglobalSGT', line 95, column 2 to column 22)",
  " (in 'noglobalSGT', line 93, column 2 to column 13)",
  " (in 'noglobalSGT', line 92, column 1 to line 95, column 22)",
  " (in 'noglobalSGT', line 98, column 2 to column 22)",
  " (in 'noglobalSGT', line 100, column 3 to column 33)",
  " (in 'noglobalSGT', line 99, column 2 to line 100, column 33)",
  " (in 'noglobalSGT', line 97, column 26 to line 101, column 2)",
  " (in 'noglobalSGT', line 97, column 1 to line 101, column 2)",
  " (in 'noglobalSGT', line 104, column 3 to column 71)",
  " (in 'noglobalSGT', line 103, column 2 to line 104, column 71)",
  " (in 'noglobalSGT', line 111, column 3 to column 51)",
  " (in 'noglobalSGT', line 112, column 3 to column 50)",
  " (in 'noglobalSGT', line 110, column 9 to line 113, column 3)",
  " (in 'noglobalSGT', line 108, column 3 to column 34)",
  " (in 'noglobalSGT', line 109, column 3 to column 30)",
  " (in 'noglobalSGT', line 107, column 27 to line 110, column 3)",
  " (in 'noglobalSGT', line 107, column 2 to line 113, column 3)",
  " (in 'noglobalSGT', line 125, column 3 to column 48)",
  " (in 'noglobalSGT', line 129, column 5 to column 59)",
  " (in 'noglobalSGT', line 127, column 5 to column 16)",
  " (in 'noglobalSGT', line 126, column 3 to line 129, column 59)",
  " (in 'noglobalSGT', line 124, column 34 to line 130, column 3)",
  " (in 'noglobalSGT', line 124, column 8 to line 130, column 3)",
  " (in 'noglobalSGT', line 122, column 4 to column 55)",
  " (in 'noglobalSGT', line 120, column 5 to column 48)",
  " (in 'noglobalSGT', line 119, column 4 to line 122, column 55)",
  " (in 'noglobalSGT', line 118, column 33 to line 123, column 3)",
  " (in 'noglobalSGT', line 118, column 7 to line 130, column 3)",
  " (in 'noglobalSGT', line 117, column 3 to column 46)",
  " (in 'noglobalSGT', line 116, column 2 to line 130, column 3)",
  " (in 'noglobalSGT', line 136, column 3 to column 72)",
  " (in 'noglobalSGT', line 135, column 9 to line 137, column 3)",
  " (in 'noglobalSGT', line 134, column 3 to column 52)",
  " (in 'noglobalSGT', line 133, column 27 to line 135, column 3)",
  " (in 'noglobalSGT', line 133, column 2 to line 137, column 3)",
  " (in 'noglobalSGT', line 143, column 3 to column 33)",
  " (in 'noglobalSGT', line 140, column 3 to column 35)",
  " (in 'noglobalSGT', line 141, column 3 to column 88)",
  " (in 'noglobalSGT', line 139, column 26 to line 142, column 3)",
  " (in 'noglobalSGT', line 139, column 2 to line 143, column 33)",
  " (in 'noglobalSGT', line 149, column 3 to column 26)",
  " (in 'noglobalSGT', line 147, column 3 to column 87)",
  " (in 'noglobalSGT', line 146, column 2 to line 149, column 26)",
  " (in 'noglobalSGT', line 102, column 16 to line 150, column 2)",
  " (in 'noglobalSGT', line 102, column 1 to line 150, column 2)",
  " (in 'noglobalSGT', line 153, column 1 to column 35)",
  " (in 'noglobalSGT', line 153, column 31 to column 32)",
  " (in 'noglobalSGT', line 154, column 1 to column 57)",
  " (in 'noglobalSGT', line 154, column 45 to column 54)",
  " (in 'noglobalSGT', line 155, column 1 to column 34)",
  " (in 'noglobalSGT', line 156, column 1 to column 54)",
  " (in 'noglobalSGT', line 157, column 1 to column 20)",
  " (in 'noglobalSGT', line 162, column 4 to column 38)",
  " (in 'noglobalSGT', line 162, column 34 to column 35)",
  " (in 'noglobalSGT', line 159, column 1 to line 162, column 38)",
  " (in 'noglobalSGT', line 160, column 2 to column 50)",
  " (in 'noglobalSGT', line 160, column 46 to column 47)",
  " (in 'noglobalSGT', line 167, column 2 to column 25)",
  " (in 'noglobalSGT', line 168, column 2 to column 27)",
  " (in 'noglobalSGT', line 166, column 8 to line 169, column 2)",
  " (in 'noglobalSGT', line 164, column 2 to column 37)",
  " (in 'noglobalSGT', line 165, column 2 to column 38)",
  " (in 'noglobalSGT', line 163, column 21 to line 166, column 2)",
  " (in 'noglobalSGT', line 163, column 1 to line 169, column 2)",
  " (in 'noglobalSGT', line 175, column 2 to column 54)",
  " (in 'noglobalSGT', line 177, column 3 to column 35)",
  " (in 'noglobalSGT', line 176, column 2 to line 177, column 35)",
  " (in 'noglobalSGT', line 174, column 8 to line 178, column 2)",
  " (in 'noglobalSGT', line 173, column 6 to column 31)",
  " (in 'noglobalSGT', line 172, column 2 to line 173, column 31)",
  " (in 'noglobalSGT', line 171, column 26 to line 174, column 2)",
  " (in 'noglobalSGT', line 171, column 1 to line 178, column 2)",
  " (in 'noglobalSGT', line 184, column 4 to column 80)",
  " (in 'noglobalSGT', line 182, column 4 to column 71)",
  " (in 'noglobalSGT', line 181, column 3 to line 184, column 80)",
  " (in 'noglobalSGT', line 180, column 16 to line 185, column 2)",
  " (in 'noglobalSGT', line 180, column 1 to line 185, column 2)",
  " (in 'noglobalSGT', line 3, column 1 to column 26)",
  " (in 'noglobalSGT', line 4, column 1 to column 59)",
  " (in 'noglobalSGT', line 5, column 1 to column 25)",
  " (in 'noglobalSGT', line 6, column 1 to column 20)",
  " (in 'noglobalSGT', line 6, column 22 to column 41)",
  " (in 'noglobalSGT', line 7, column 1 to column 25)",
  " (in 'noglobalSGT', line 8, column 1 to column 22)",
  " (in 'noglobalSGT', line 8, column 23 to column 44)",
  " (in 'noglobalSGT', line 9, column 1 to column 28)",
  " (in 'noglobalSGT', line 10, column 17 to column 18)",
  " (in 'noglobalSGT', line 10, column 1 to column 22)",
  " (in 'noglobalSGT', line 11, column 1 to column 31)",
  " (in 'noglobalSGT', line 11, column 32 to column 61)",
  " (in 'noglobalSGT', line 12, column 1 to column 32)",
  " (in 'noglobalSGT', line 12, column 33 to column 63)",
  " (in 'noglobalSGT', line 13, column 1 to column 37)",
  " (in 'noglobalSGT', line 14, column 1 to column 39)",
  " (in 'noglobalSGT', line 15, column 1 to column 41)",
  " (in 'noglobalSGT', line 16, column 1 to column 40)",
  " (in 'noglobalSGT', line 17, column 1 to column 40)",
  " (in 'noglobalSGT', line 18, column 1 to column 16)",
  " (in 'noglobalSGT', line 19, column 8 to column 9)",
  " (in 'noglobalSGT', line 19, column 11 to column 12)",
  " (in 'noglobalSGT', line 19, column 1 to column 19)",
  " (in 'noglobalSGT', line 20, column 17 to column 18)",
  " (in 'noglobalSGT', line 20, column 1 to column 34)",
  " (in 'noglobalSGT', line 23, column 2 to column 42)",
  " (in 'noglobalSGT', line 24, column 1 to column 51)",
  " (in 'noglobalSGT', line 30, column 2 to column 21)",
  " (in 'noglobalSGT', line 26, column 2 to column 45)",
  " (in 'noglobalSGT', line 25, column 32 to line 28, column 2)",
  " (in 'noglobalSGT', line 25, column 1 to line 30, column 21)",
  " (in 'noglobalSGT', line 33, column 9 to column 10)",
  " (in 'noglobalSGT', line 45, column 8 to column 19)",
  " (in 'noglobalSGT', line 50, column 17 to column 18)",
  " (in 'noglobalSGT', line 51, column 17 to column 18)",
  " (in 'noglobalSGT', line 52, column 8 to column 23)",
  " (in 'noglobalSGT', line 53, column 8 to column 9)",
  " (in 'noglobalSGT', line 54, column 17 to column 18)",
  " (in 'noglobalSGT', line 55, column 17 to column 18)"};
#include <stan_meta_header.hpp>
class model_noglobalSGT final : public model_base_crtp<model_noglobalSGT> {
private:
  int SEASONALITY;
  double SEASONALITY_F;
  double CAUCHY_SD;
  double MIN_POW_TREND;
  double MAX_POW_TREND;
  double MIN_SIGMA;
  double MIN_NU;
  double MAX_NU;
  int N;
  Eigen::Matrix<double,-1,1> y_data__;
  double POW_TREND_ALPHA;
  double POW_TREND_BETA;
  double POW_SEASON_ALPHA;
  double POW_SEASON_BETA;
  int USE_REGRESSION;
  int SEASONALITY_TYPE;
  int USE_SMOOTHED_ERROR;
  int NUM_OF_SEASON_INIT_CYCLES;
  int LEVEL_CALC_METHOD;
  int J;
  Eigen::Matrix<double,-1,-1> xreg_data__;
  Eigen::Matrix<double,-1,1> REG_CAUCHY_SD_data__;
  double fractSeasonality;
  double reg0CauchySd;
  int s_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xreg{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> REG_CAUCHY_SD{nullptr, 0};
public:
  ~model_noglobalSGT() {}
  model_noglobalSGT(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_noglobalSGT_namespace::model_noglobalSGT";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 128;
      context__.validate_dims("data initialization", "SEASONALITY", "int",
        std::vector<size_t>{});
      SEASONALITY = std::numeric_limits<int>::min();
      current_statement__ = 128;
      SEASONALITY = context__.vals_i("SEASONALITY")[(1 - 1)];
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "SEASONALITY",
        SEASONALITY, 2);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "SEASONALITY_F",
        "double", std::vector<size_t>{});
      SEASONALITY_F = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 129;
      SEASONALITY_F = context__.vals_r("SEASONALITY_F")[(1 - 1)];
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "SEASONALITY_F",
        SEASONALITY_F, SEASONALITY);
      current_statement__ = 129;
      stan::math::check_less_or_equal(function__, "SEASONALITY_F",
        SEASONALITY_F, (SEASONALITY + 1));
      current_statement__ = 130;
      context__.validate_dims("data initialization", "CAUCHY_SD", "double",
        std::vector<size_t>{});
      CAUCHY_SD = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 130;
      CAUCHY_SD = context__.vals_r("CAUCHY_SD")[(1 - 1)];
      current_statement__ = 130;
      stan::math::check_greater_or_equal(function__, "CAUCHY_SD", CAUCHY_SD,
        0);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "MIN_POW_TREND",
        "double", std::vector<size_t>{});
      MIN_POW_TREND = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 131;
      MIN_POW_TREND = context__.vals_r("MIN_POW_TREND")[(1 - 1)];
      current_statement__ = 132;
      context__.validate_dims("data initialization", "MAX_POW_TREND",
        "double", std::vector<size_t>{});
      MAX_POW_TREND = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 132;
      MAX_POW_TREND = context__.vals_r("MAX_POW_TREND")[(1 - 1)];
      current_statement__ = 133;
      context__.validate_dims("data initialization", "MIN_SIGMA", "double",
        std::vector<size_t>{});
      MIN_SIGMA = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 133;
      MIN_SIGMA = context__.vals_r("MIN_SIGMA")[(1 - 1)];
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "MIN_SIGMA", MIN_SIGMA,
        0);
      current_statement__ = 134;
      context__.validate_dims("data initialization", "MIN_NU", "double",
        std::vector<size_t>{});
      MIN_NU = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 134;
      MIN_NU = context__.vals_r("MIN_NU")[(1 - 1)];
      current_statement__ = 134;
      stan::math::check_greater_or_equal(function__, "MIN_NU", MIN_NU, 1);
      current_statement__ = 135;
      context__.validate_dims("data initialization", "MAX_NU", "double",
        std::vector<size_t>{});
      MAX_NU = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 135;
      MAX_NU = context__.vals_r("MAX_NU")[(1 - 1)];
      current_statement__ = 135;
      stan::math::check_greater_or_equal(function__, "MAX_NU", MAX_NU, 1);
      current_statement__ = 136;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 136;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 136;
      stan::math::check_greater_or_equal(function__, "N", N, (SEASONALITY +
        1));
      current_statement__ = 137;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 138;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 138;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 138;
        pos__ = 1;
        current_statement__ = 138;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 138;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 138;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 138;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 139;
      context__.validate_dims("data initialization", "POW_TREND_ALPHA",
        "double", std::vector<size_t>{});
      POW_TREND_ALPHA = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 139;
      POW_TREND_ALPHA = context__.vals_r("POW_TREND_ALPHA")[(1 - 1)];
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__, "POW_TREND_ALPHA",
        POW_TREND_ALPHA, 0);
      current_statement__ = 140;
      context__.validate_dims("data initialization", "POW_TREND_BETA",
        "double", std::vector<size_t>{});
      POW_TREND_BETA = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 140;
      POW_TREND_BETA = context__.vals_r("POW_TREND_BETA")[(1 - 1)];
      current_statement__ = 140;
      stan::math::check_greater_or_equal(function__, "POW_TREND_BETA",
        POW_TREND_BETA, 0);
      current_statement__ = 141;
      context__.validate_dims("data initialization", "POW_SEASON_ALPHA",
        "double", std::vector<size_t>{});
      POW_SEASON_ALPHA = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 141;
      POW_SEASON_ALPHA = context__.vals_r("POW_SEASON_ALPHA")[(1 - 1)];
      current_statement__ = 141;
      stan::math::check_greater_or_equal(function__, "POW_SEASON_ALPHA",
        POW_SEASON_ALPHA, 0);
      current_statement__ = 142;
      context__.validate_dims("data initialization", "POW_SEASON_BETA",
        "double", std::vector<size_t>{});
      POW_SEASON_BETA = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 142;
      POW_SEASON_BETA = context__.vals_r("POW_SEASON_BETA")[(1 - 1)];
      current_statement__ = 142;
      stan::math::check_greater_or_equal(function__, "POW_SEASON_BETA",
        POW_SEASON_BETA, 0);
      current_statement__ = 143;
      context__.validate_dims("data initialization", "USE_REGRESSION", "int",
        std::vector<size_t>{});
      USE_REGRESSION = std::numeric_limits<int>::min();
      current_statement__ = 143;
      USE_REGRESSION = context__.vals_i("USE_REGRESSION")[(1 - 1)];
      current_statement__ = 143;
      stan::math::check_greater_or_equal(function__, "USE_REGRESSION",
        USE_REGRESSION, 0);
      current_statement__ = 143;
      stan::math::check_less_or_equal(function__, "USE_REGRESSION",
        USE_REGRESSION, 1);
      current_statement__ = 144;
      context__.validate_dims("data initialization", "SEASONALITY_TYPE",
        "int", std::vector<size_t>{});
      SEASONALITY_TYPE = std::numeric_limits<int>::min();
      current_statement__ = 144;
      SEASONALITY_TYPE = context__.vals_i("SEASONALITY_TYPE")[(1 - 1)];
      current_statement__ = 144;
      stan::math::check_greater_or_equal(function__, "SEASONALITY_TYPE",
        SEASONALITY_TYPE, 0);
      current_statement__ = 144;
      stan::math::check_less_or_equal(function__, "SEASONALITY_TYPE",
        SEASONALITY_TYPE, 1);
      current_statement__ = 145;
      context__.validate_dims("data initialization", "USE_SMOOTHED_ERROR",
        "int", std::vector<size_t>{});
      USE_SMOOTHED_ERROR = std::numeric_limits<int>::min();
      current_statement__ = 145;
      USE_SMOOTHED_ERROR = context__.vals_i("USE_SMOOTHED_ERROR")[(1 - 1)];
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__, "USE_SMOOTHED_ERROR",
        USE_SMOOTHED_ERROR, 0);
      current_statement__ = 145;
      stan::math::check_less_or_equal(function__, "USE_SMOOTHED_ERROR",
        USE_SMOOTHED_ERROR, 1);
      current_statement__ = 146;
      context__.validate_dims("data initialization",
        "NUM_OF_SEASON_INIT_CYCLES", "int", std::vector<size_t>{});
      NUM_OF_SEASON_INIT_CYCLES = std::numeric_limits<int>::min();
      current_statement__ = 146;
      NUM_OF_SEASON_INIT_CYCLES = context__.vals_i("NUM_OF_SEASON_INIT_CYCLES")[(1
        - 1)];
      current_statement__ = 146;
      stan::math::check_greater_or_equal(function__,
        "NUM_OF_SEASON_INIT_CYCLES", NUM_OF_SEASON_INIT_CYCLES, 0);
      current_statement__ = 147;
      context__.validate_dims("data initialization", "LEVEL_CALC_METHOD",
        "int", std::vector<size_t>{});
      LEVEL_CALC_METHOD = std::numeric_limits<int>::min();
      current_statement__ = 147;
      LEVEL_CALC_METHOD = context__.vals_i("LEVEL_CALC_METHOD")[(1 - 1)];
      current_statement__ = 147;
      stan::math::check_greater_or_equal(function__, "LEVEL_CALC_METHOD",
        LEVEL_CALC_METHOD, 0);
      current_statement__ = 147;
      stan::math::check_less_or_equal(function__, "LEVEL_CALC_METHOD",
        LEVEL_CALC_METHOD, 3);
      current_statement__ = 148;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 148;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 148;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("xreg", "N", N);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("xreg", "J", J);
      current_statement__ = 151;
      context__.validate_dims("data initialization", "xreg", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(J)});
      xreg_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, J,
                      std::numeric_limits<double>::quiet_NaN());
      new (&xreg) Eigen::Map<Eigen::Matrix<double,-1,-1>>(xreg_data__.data(),
        N, J);
      {
        std::vector<local_scalar_t__> xreg_flat__;
        current_statement__ = 151;
        xreg_flat__ = context__.vals_r("xreg");
        current_statement__ = 151;
        pos__ = 1;
        current_statement__ = 151;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 151;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 151;
            stan::model::assign(xreg, xreg_flat__[(pos__ - 1)],
              "assigning variable xreg", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 151;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 152;
      stan::math::validate_non_negative_index("REG_CAUCHY_SD", "J", J);
      current_statement__ = 153;
      context__.validate_dims("data initialization", "REG_CAUCHY_SD",
        "double", std::vector<size_t>{static_cast<size_t>(J)});
      REG_CAUCHY_SD_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                               std::numeric_limits<double>::quiet_NaN());
      new (&REG_CAUCHY_SD)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(REG_CAUCHY_SD_data__.data(),
        J);
      {
        std::vector<local_scalar_t__> REG_CAUCHY_SD_flat__;
        current_statement__ = 153;
        REG_CAUCHY_SD_flat__ = context__.vals_r("REG_CAUCHY_SD");
        current_statement__ = 153;
        pos__ = 1;
        current_statement__ = 153;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 153;
          stan::model::assign(REG_CAUCHY_SD, REG_CAUCHY_SD_flat__[(pos__ -
            1)], "assigning variable REG_CAUCHY_SD",
            stan::model::index_uni(sym1__));
          current_statement__ = 153;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 153;
      stan::math::check_greater_or_equal(function__, "REG_CAUCHY_SD",
        REG_CAUCHY_SD, 0);
      current_statement__ = 154;
      fractSeasonality = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 155;
      reg0CauchySd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 155;
      reg0CauchySd = (stan::math::mean(REG_CAUCHY_SD) * 10);
      current_statement__ = 159;
      if (stan::math::logical_gt(SEASONALITY_F, SEASONALITY)) {
        current_statement__ = 157;
        fractSeasonality = (SEASONALITY_F - SEASONALITY);
      } else {
        current_statement__ = 156;
        fractSeasonality = 0;
      }
      current_statement__ = 154;
      stan::math::check_greater_or_equal(function__, "fractSeasonality",
        fractSeasonality, 0);
      current_statement__ = 154;
      stan::math::check_less_or_equal(function__, "fractSeasonality",
        fractSeasonality, 1);
      current_statement__ = 155;
      stan::math::check_greater_or_equal(function__, "reg0CauchySd",
        reg0CauchySd, 0);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("regCoef", "J", J);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("initS", "SEASONALITY",
        SEASONALITY);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("l", "N", N);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("l0", "N", N);
      current_statement__ = 164;
      s_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 164;
      s_1dim__ = ((N + SEASONALITY) + 1);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("s", "N + SEASONALITY + 1",
        s_1dim__);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("r", "N", N);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("expVal", "N", N);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("smoothedInnovSize", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = J + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +
      SEASONALITY + 1;
  }
  inline std::string model_name() const final {
    return "model_noglobalSGT";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_noglobalSGT_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> regCoef =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 1;
      regCoef = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      local_scalar_t__ regOffset = DUMMY_VAR__;
      current_statement__ = 2;
      regOffset = in__.template read<local_scalar_t__>();
      local_scalar_t__ nu = DUMMY_VAR__;
      current_statement__ = 3;
      nu = in__.template read_constrain_lub<local_scalar_t__,
             jacobian__>(MIN_NU, MAX_NU, lp__);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ levSm = DUMMY_VAR__;
      current_statement__ = 5;
      levSm = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      local_scalar_t__ llevSm = DUMMY_VAR__;
      current_statement__ = 6;
      llevSm = in__.template read_constrain_lub<local_scalar_t__,
                 jacobian__>(0, 1, lp__);
      local_scalar_t__ sSm = DUMMY_VAR__;
      current_statement__ = 7;
      sSm = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      local_scalar_t__ powx = DUMMY_VAR__;
      current_statement__ = 8;
      powx = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 1, lp__);
      local_scalar_t__ powTrendBeta = DUMMY_VAR__;
      current_statement__ = 9;
      powTrendBeta = in__.template read_constrain_lub<local_scalar_t__,
                       jacobian__>(0, 1, lp__);
      local_scalar_t__ coefTrend = DUMMY_VAR__;
      current_statement__ = 10;
      coefTrend = in__.template read<local_scalar_t__>();
      local_scalar_t__ offsetSigma = DUMMY_VAR__;
      current_statement__ = 11;
      offsetSigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(MIN_SIGMA, lp__);
      local_scalar_t__ innovSm = DUMMY_VAR__;
      current_statement__ = 12;
      innovSm = in__.template read_constrain_lub<local_scalar_t__,
                  jacobian__>(0, 1, lp__);
      local_scalar_t__ innovSizeInit = DUMMY_VAR__;
      current_statement__ = 13;
      innovSizeInit = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> initS =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(SEASONALITY,
          DUMMY_VAR__);
      current_statement__ = 14;
      initS = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(SEASONALITY);
      local_scalar_t__ powSeason = DUMMY_VAR__;
      current_statement__ = 15;
      powSeason = in__.template read_constrain_lub<local_scalar_t__,
                    jacobian__>(0, 1, lp__);
      local_scalar_t__ powTrend = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> l =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> l0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> s =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(s_1dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> expVal =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> smoothedInnovSize =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ seasonalityP = DUMMY_VAR__;
      local_scalar_t__ sumsu = DUMMY_VAR__;
      local_scalar_t__ newLevelP = DUMMY_VAR__;
      local_scalar_t__ movingSum = DUMMY_VAR__;
      current_statement__ = 29;
      if (USE_REGRESSION) {
        current_statement__ = 28;
        stan::model::assign(r,
          stan::math::add(stan::math::multiply(xreg, regCoef), regOffset),
          "assigning variable r");
      } else {
        current_statement__ = 27;
        stan::model::assign(r, stan::math::rep_vector(0, N),
          "assigning variable r");
      }
      current_statement__ = 42;
      if (stan::math::logical_eq(SEASONALITY_TYPE, 0)) {
        current_statement__ = 34;
        sumsu = 0;
        current_statement__ = 36;
        for (int i = 1; i <= SEASONALITY; ++i) {
          current_statement__ = 35;
          sumsu = (sumsu +
            stan::math::exp(
              stan::model::rvalue(initS, "initS", stan::model::index_uni(i))));
        }
        current_statement__ = 39;
        for (int i = 1; i <= SEASONALITY; ++i) {
          current_statement__ = 37;
          stan::model::assign(s,
            ((stan::math::exp(
                stan::model::rvalue(initS, "initS", stan::model::index_uni(i)))
            * SEASONALITY) / sumsu), "assigning variable s",
            stan::model::index_uni(i));
        }
        current_statement__ = 40;
        stan::model::assign(l,
          ((stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
          stan::model::rvalue(r, "r", stan::model::index_uni(1))) /
          stan::model::rvalue(s, "s", stan::model::index_uni(1))),
          "assigning variable l", stan::model::index_uni(1));
      } else {
        current_statement__ = 31;
        for (int i = 1; i <= SEASONALITY; ++i) {
          current_statement__ = 30;
          stan::model::assign(s,
            stan::model::rvalue(initS, "initS", stan::model::index_uni(i)),
            "assigning variable s", stan::model::index_uni(i));
        }
        current_statement__ = 32;
        stan::model::assign(l,
          (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
          stan::model::rvalue(r, "r", stan::model::index_uni(1))),
          "assigning variable l", stan::model::index_uni(1));
      }
      current_statement__ = 43;
      stan::model::assign(s, 1, "assigning variable s",
        stan::model::index_uni(((N + SEASONALITY) + 1)));
      current_statement__ = 44;
      stan::model::assign(s,
        stan::model::rvalue(s, "s", stan::model::index_uni(1)),
        "assigning variable s", stan::model::index_uni((SEASONALITY + 1)));
      current_statement__ = 45;
      stan::model::assign(s,
        stan::model::rvalue(s, "s", stan::model::index_uni(2)),
        "assigning variable s", stan::model::index_uni((SEASONALITY + 2)));
      current_statement__ = 48;
      if (USE_SMOOTHED_ERROR) {
        current_statement__ = 47;
        stan::model::assign(smoothedInnovSize, innovSizeInit,
          "assigning variable smoothedInnovSize", stan::model::index_uni(1));
      } else {
        current_statement__ = 46;
        stan::model::assign(smoothedInnovSize, 1,
          "assigning variable smoothedInnovSize", stan::model::index_uni(1));
      }
      current_statement__ = 49;
      powTrend = (((MAX_POW_TREND - MIN_POW_TREND) * powTrendBeta) +
        MIN_POW_TREND);
      current_statement__ = 50;
      stan::model::assign(expVal,
        stan::model::rvalue(y, "y", stan::model::index_uni(1)),
        "assigning variable expVal", stan::model::index_uni(1));
      current_statement__ = 53;
      if (stan::math::logical_eq(LEVEL_CALC_METHOD, 3)) {
        current_statement__ = 52;
        stan::model::assign(l0,
          stan::model::rvalue(l, "l", stan::model::index_uni(1)),
          "assigning variable l0", stan::model::index_uni(1));
      } else {
        current_statement__ = 51;
        stan::model::assign(l0, stan::math::rep_vector(0, N),
          "assigning variable l0");
      }
      current_statement__ = 58;
      if (stan::math::logical_gt(LEVEL_CALC_METHOD, 0)) {
        current_statement__ = 54;
        movingSum = (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
          stan::model::rvalue(r, "r", stan::model::index_uni(1)));
        current_statement__ = 56;
        for (int t = 2; t <= SEASONALITY; ++t) {
          current_statement__ = 55;
          movingSum = ((movingSum +
            stan::model::rvalue(y, "y", stan::model::index_uni(t))) -
            stan::model::rvalue(r, "r", stan::model::index_uni(t)));
        }
      }
      current_statement__ = 95;
      for (int t = 2; t <= N; ++t) {
        current_statement__ = 60;
        if ((stan::math::primitive_value(
               stan::math::logical_gt(LEVEL_CALC_METHOD, 0))
            &&
            stan::math::primitive_value(
              stan::math::logical_gt(t, SEASONALITY)))) {
          current_statement__ = 59;
          movingSum = ((movingSum +
            (stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
            stan::model::rvalue(r, "r", stan::model::index_uni(t)))) -
            (stan::model::rvalue(y, "y",
               stan::model::index_uni((t - SEASONALITY)))
            -
            stan::model::rvalue(r, "r",
              stan::model::index_uni((t - SEASONALITY)))));
        }
        current_statement__ = 67;
        if (stan::math::logical_eq(SEASONALITY_TYPE, 0)) {
          current_statement__ = 64;
          stan::model::assign(expVal,
            ((stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))) *
            stan::model::rvalue(s, "s", stan::model::index_uni(t))) +
            stan::model::rvalue(r, "r", stan::model::index_uni(t))),
            "assigning variable expVal", stan::model::index_uni(t));
          current_statement__ = 65;
          newLevelP = ((stan::model::rvalue(y, "y", stan::model::index_uni(t))
            - stan::model::rvalue(r, "r", stan::model::index_uni(t))) /
            stan::model::rvalue(s, "s", stan::model::index_uni(t)));
        } else {
          current_statement__ = 61;
          stan::model::assign(expVal,
            ((stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))) +
            (stan::model::rvalue(s, "s", stan::model::index_uni(t)) *
            stan::math::pow(
              stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))),
              powSeason))) +
            stan::model::rvalue(r, "r", stan::model::index_uni(t))),
            "assigning variable expVal", stan::model::index_uni(t));
          current_statement__ = 62;
          newLevelP = ((stan::model::rvalue(y, "y", stan::model::index_uni(t))
            - stan::model::rvalue(r, "r", stan::model::index_uni(t))) -
            (stan::model::rvalue(s, "s", stan::model::index_uni(t)) *
            stan::math::pow(
              stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))),
              powSeason)));
        }
        current_statement__ = 80;
        if (stan::math::logical_eq(LEVEL_CALC_METHOD, 0)) {
          current_statement__ = 79;
          stan::model::assign(l, ((levSm * newLevelP) + ((1 - levSm) *
            stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))))),
            "assigning variable l", stan::model::index_uni(t));
        } else {
          current_statement__ = 78;
          if (stan::math::logical_eq(LEVEL_CALC_METHOD, 2)) {
            current_statement__ = 76;
            if (stan::math::logical_lte(t, SEASONALITY)) {
              current_statement__ = 75;
              stan::model::assign(l, ((levSm * newLevelP) + ((1 - levSm) *
                stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))))),
                "assigning variable l", stan::model::index_uni(t));
            } else {
              current_statement__ = 74;
              stan::model::assign(l, (((levSm * movingSum) / SEASONALITY) +
                ((1 - levSm) *
                stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))))),
                "assigning variable l", stan::model::index_uni(t));
            }
          } else {
            current_statement__ = 73;
            if (stan::math::logical_eq(LEVEL_CALC_METHOD, 3)) {
              current_statement__ = 68;
              stan::model::assign(l0, ((levSm * newLevelP) + ((1 - levSm) *
                stan::model::rvalue(l0, "l0", stan::model::index_uni((t - 1))))),
                "assigning variable l0", stan::model::index_uni(t));
              current_statement__ = 71;
              if (stan::math::logical_lte(t, SEASONALITY)) {
                current_statement__ = 70;
                stan::model::assign(l,
                  stan::model::rvalue(l0, "l0", stan::model::index_uni(t)),
                  "assigning variable l", stan::model::index_uni(t));
              } else {
                current_statement__ = 69;
                stan::model::assign(l, ((llevSm *
                  stan::model::rvalue(l0, "l0", stan::model::index_uni(t))) +
                  (((1 - llevSm) * movingSum) / SEASONALITY)),
                  "assigning variable l", stan::model::index_uni(t));
              }
            }
          }
        }
        current_statement__ = 85;
        if (stan::math::logical_eq(SEASONALITY_TYPE, 0)) {
          current_statement__ = 83;
          seasonalityP = (((sSm *
            (stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
            stan::model::rvalue(r, "r", stan::model::index_uni(t)))) /
            stan::model::rvalue(l, "l", stan::model::index_uni(t))) + ((1 -
            sSm) * stan::model::rvalue(s, "s", stan::model::index_uni(t))));
        } else {
          current_statement__ = 81;
          seasonalityP = (((sSm *
            ((stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
            stan::model::rvalue(l, "l", stan::model::index_uni(t))) -
            stan::model::rvalue(r, "r", stan::model::index_uni(t)))) /
            stan::math::pow(
              stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))),
              powSeason))
            + ((1 - sSm) *
            stan::model::rvalue(s, "s", stan::model::index_uni(t))));
        }
        current_statement__ = 90;
        if (stan::math::logical_gt(fractSeasonality, 0)) {
          current_statement__ = 87;
          stan::model::assign(s, seasonalityP, "assigning variable s",
            stan::model::index_uni(((t + SEASONALITY) + 1)));
          current_statement__ = 88;
          stan::model::assign(s, ((fractSeasonality *
            stan::model::rvalue(s, "s",
              stan::model::index_uni((t + SEASONALITY)))) + ((1 -
            fractSeasonality) * seasonalityP)), "assigning variable s",
            stan::model::index_uni((t + SEASONALITY)));
        } else {
          current_statement__ = 86;
          stan::model::assign(s, seasonalityP, "assigning variable s",
            stan::model::index_uni((t + SEASONALITY)));
        }
        current_statement__ = 93;
        if (USE_SMOOTHED_ERROR) {
          current_statement__ = 92;
          stan::model::assign(smoothedInnovSize, ((innovSm *
            stan::math::abs(
              (stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
              stan::model::rvalue(expVal, "expVal", stan::model::index_uni(t)))))
            + ((1 - innovSm) *
            stan::model::rvalue(smoothedInnovSize, "smoothedInnovSize",
              stan::model::index_uni((t - 1))))),
            "assigning variable smoothedInnovSize", stan::model::index_uni(t));
        } else {
          current_statement__ = 91;
          stan::model::assign(smoothedInnovSize, 1,
            "assigning variable smoothedInnovSize", stan::model::index_uni(t));
        }
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "powTrend", powTrend,
        MIN_POW_TREND);
      current_statement__ = 16;
      stan::math::check_less_or_equal(function__, "powTrend", powTrend,
        MAX_POW_TREND);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "l", l, 0);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "l0", l0, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "expVal", expVal, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "smoothedInnovSize",
        smoothedInnovSize, 0);
      {
        current_statement__ = 96;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, CAUCHY_SD));
        current_statement__ = 97;
        if (stan::math::logical_lt(sigma, 0)) {
          current_statement__ = 97;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 97;
          lp_accum__.add(-stan::math::cauchy_lccdf(0, 0, CAUCHY_SD));
        }
        current_statement__ = 98;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(offsetSigma,
                         MIN_SIGMA, CAUCHY_SD));
        current_statement__ = 99;
        if (stan::math::logical_lt(offsetSigma, MIN_SIGMA)) {
          current_statement__ = 99;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 99;
          lp_accum__.add(-stan::math::cauchy_lccdf(MIN_SIGMA, MIN_SIGMA,
                            CAUCHY_SD));
        }
        current_statement__ = 100;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(coefTrend, 0,
                         CAUCHY_SD));
        current_statement__ = 101;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(powTrendBeta,
                         POW_TREND_ALPHA, POW_TREND_BETA));
        current_statement__ = 102;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(levSm, 1, 2));
        current_statement__ = 105;
        if (USE_SMOOTHED_ERROR) {
          current_statement__ = 106;
          lp_accum__.add(stan::math::cauchy_lpdf<propto__>(innovSizeInit,
                           (stan::model::rvalue(y, "y",
                              stan::model::index_uni(1)) / 100), CAUCHY_SD));
          current_statement__ = 107;
          if (stan::math::logical_lt(innovSizeInit, 0)) {
            current_statement__ = 107;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 107;
            lp_accum__.add(-stan::math::cauchy_lccdf(0,
                              (stan::model::rvalue(y, "y",
                                 stan::model::index_uni(1)) / 100), CAUCHY_SD));
          }
        } else {
          current_statement__ = 103;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(innovSizeInit, 0,
                           1));
          current_statement__ = 104;
          if (stan::math::logical_lt(innovSizeInit, 0)) {
            current_statement__ = 104;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 104;
            lp_accum__.add(-stan::math::normal_lccdf(0, 0, 1));
          }
        }
        current_statement__ = 114;
        if (USE_REGRESSION) {
          current_statement__ = 111;
          lp_accum__.add(stan::math::cauchy_lpdf<propto__>(regCoef, 0,
                           REG_CAUCHY_SD));
          current_statement__ = 112;
          lp_accum__.add(stan::math::cauchy_lpdf<propto__>(regOffset, 0,
                           reg0CauchySd));
        } else {
          current_statement__ = 108;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(regCoef, 0, 1));
          current_statement__ = 109;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(regOffset, 0, 1));
        }
        current_statement__ = 122;
        if (stan::math::logical_eq(SEASONALITY_TYPE, 0)) {
          current_statement__ = 120;
          for (int t = 1; t <= SEASONALITY; ++t) {
            current_statement__ = 119;
            lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                             stan::model::rvalue(initS, "initS",
                               stan::model::index_uni(t)), 0, 4));
          }
        } else {
          current_statement__ = 115;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(powSeason,
                           POW_SEASON_ALPHA, POW_SEASON_BETA));
          current_statement__ = 117;
          for (int t = 1; t <= SEASONALITY; ++t) {
            current_statement__ = 116;
            lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                             stan::model::rvalue(initS, "initS",
                               stan::model::index_uni(t)), 0,
                             (stan::model::rvalue(y, "y",
                                stan::model::index_uni(t)) * 0.3)));
          }
        }
        current_statement__ = 127;
        for (int t = 2; t <= N; ++t) {
          current_statement__ = 125;
          if (stan::math::logical_eq(USE_SMOOTHED_ERROR, 0)) {
            current_statement__ = 124;
            lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(t)), nu,
                             stan::model::rvalue(expVal, "expVal",
                               stan::model::index_uni(t)), ((sigma *
                             stan::math::pow(
                               stan::model::rvalue(expVal, "expVal",
                                 stan::model::index_uni(t)), powx)) +
                             offsetSigma)));
          } else {
            current_statement__ = 123;
            lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(t)), nu,
                             stan::model::rvalue(expVal, "expVal",
                               stan::model::index_uni(t)), ((sigma *
                             stan::model::rvalue(smoothedInnovSize,
                               "smoothedInnovSize",
                               stan::model::index_uni((t - 1)))) +
                             offsetSigma)));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_noglobalSGT_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> regCoef =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      regCoef = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      double regOffset = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      regOffset = in__.template read<local_scalar_t__>();
      double nu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      nu = in__.template read_constrain_lub<local_scalar_t__,
             jacobian__>(MIN_NU, MAX_NU, lp__);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double levSm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      levSm = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      double llevSm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      llevSm = in__.template read_constrain_lub<local_scalar_t__,
                 jacobian__>(0, 1, lp__);
      double sSm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sSm = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      double powx = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      powx = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 1, lp__);
      double powTrendBeta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      powTrendBeta = in__.template read_constrain_lub<local_scalar_t__,
                       jacobian__>(0, 1, lp__);
      double coefTrend = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      coefTrend = in__.template read<local_scalar_t__>();
      double offsetSigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      offsetSigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(MIN_SIGMA, lp__);
      double innovSm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      innovSm = in__.template read_constrain_lub<local_scalar_t__,
                  jacobian__>(0, 1, lp__);
      double innovSizeInit = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      innovSizeInit = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> initS =
        Eigen::Matrix<double,-1,1>::Constant(SEASONALITY,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      initS = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(SEASONALITY);
      double powSeason = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      powSeason = in__.template read_constrain_lub<local_scalar_t__,
                    jacobian__>(0, 1, lp__);
      double powTrend = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> l =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> l0 =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> s =
        Eigen::Matrix<double,-1,1>::Constant(s_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> r =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> expVal =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> smoothedInnovSize =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double seasonalityP = std::numeric_limits<double>::quiet_NaN();
      double sumsu = std::numeric_limits<double>::quiet_NaN();
      double newLevelP = std::numeric_limits<double>::quiet_NaN();
      double movingSum = std::numeric_limits<double>::quiet_NaN();
      out__.write(regCoef);
      out__.write(regOffset);
      out__.write(nu);
      out__.write(sigma);
      out__.write(levSm);
      out__.write(llevSm);
      out__.write(sSm);
      out__.write(powx);
      out__.write(powTrendBeta);
      out__.write(coefTrend);
      out__.write(offsetSigma);
      out__.write(innovSm);
      out__.write(innovSizeInit);
      out__.write(initS);
      out__.write(powSeason);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 29;
      if (USE_REGRESSION) {
        current_statement__ = 28;
        stan::model::assign(r,
          stan::math::add(stan::math::multiply(xreg, regCoef), regOffset),
          "assigning variable r");
      } else {
        current_statement__ = 27;
        stan::model::assign(r, stan::math::rep_vector(0, N),
          "assigning variable r");
      }
      current_statement__ = 42;
      if (stan::math::logical_eq(SEASONALITY_TYPE, 0)) {
        current_statement__ = 34;
        sumsu = 0;
        current_statement__ = 36;
        for (int i = 1; i <= SEASONALITY; ++i) {
          current_statement__ = 35;
          sumsu = (sumsu +
            stan::math::exp(
              stan::model::rvalue(initS, "initS", stan::model::index_uni(i))));
        }
        current_statement__ = 39;
        for (int i = 1; i <= SEASONALITY; ++i) {
          current_statement__ = 37;
          stan::model::assign(s,
            ((stan::math::exp(
                stan::model::rvalue(initS, "initS", stan::model::index_uni(i)))
            * SEASONALITY) / sumsu), "assigning variable s",
            stan::model::index_uni(i));
        }
        current_statement__ = 40;
        stan::model::assign(l,
          ((stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
          stan::model::rvalue(r, "r", stan::model::index_uni(1))) /
          stan::model::rvalue(s, "s", stan::model::index_uni(1))),
          "assigning variable l", stan::model::index_uni(1));
      } else {
        current_statement__ = 31;
        for (int i = 1; i <= SEASONALITY; ++i) {
          current_statement__ = 30;
          stan::model::assign(s,
            stan::model::rvalue(initS, "initS", stan::model::index_uni(i)),
            "assigning variable s", stan::model::index_uni(i));
        }
        current_statement__ = 32;
        stan::model::assign(l,
          (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
          stan::model::rvalue(r, "r", stan::model::index_uni(1))),
          "assigning variable l", stan::model::index_uni(1));
      }
      current_statement__ = 43;
      stan::model::assign(s, 1, "assigning variable s",
        stan::model::index_uni(((N + SEASONALITY) + 1)));
      current_statement__ = 44;
      stan::model::assign(s,
        stan::model::rvalue(s, "s", stan::model::index_uni(1)),
        "assigning variable s", stan::model::index_uni((SEASONALITY + 1)));
      current_statement__ = 45;
      stan::model::assign(s,
        stan::model::rvalue(s, "s", stan::model::index_uni(2)),
        "assigning variable s", stan::model::index_uni((SEASONALITY + 2)));
      current_statement__ = 48;
      if (USE_SMOOTHED_ERROR) {
        current_statement__ = 47;
        stan::model::assign(smoothedInnovSize, innovSizeInit,
          "assigning variable smoothedInnovSize", stan::model::index_uni(1));
      } else {
        current_statement__ = 46;
        stan::model::assign(smoothedInnovSize, 1,
          "assigning variable smoothedInnovSize", stan::model::index_uni(1));
      }
      current_statement__ = 49;
      powTrend = (((MAX_POW_TREND - MIN_POW_TREND) * powTrendBeta) +
        MIN_POW_TREND);
      current_statement__ = 50;
      stan::model::assign(expVal,
        stan::model::rvalue(y, "y", stan::model::index_uni(1)),
        "assigning variable expVal", stan::model::index_uni(1));
      current_statement__ = 53;
      if (stan::math::logical_eq(LEVEL_CALC_METHOD, 3)) {
        current_statement__ = 52;
        stan::model::assign(l0,
          stan::model::rvalue(l, "l", stan::model::index_uni(1)),
          "assigning variable l0", stan::model::index_uni(1));
      } else {
        current_statement__ = 51;
        stan::model::assign(l0, stan::math::rep_vector(0, N),
          "assigning variable l0");
      }
      current_statement__ = 58;
      if (stan::math::logical_gt(LEVEL_CALC_METHOD, 0)) {
        current_statement__ = 54;
        movingSum = (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
          stan::model::rvalue(r, "r", stan::model::index_uni(1)));
        current_statement__ = 56;
        for (int t = 2; t <= SEASONALITY; ++t) {
          current_statement__ = 55;
          movingSum = ((movingSum +
            stan::model::rvalue(y, "y", stan::model::index_uni(t))) -
            stan::model::rvalue(r, "r", stan::model::index_uni(t)));
        }
      }
      current_statement__ = 95;
      for (int t = 2; t <= N; ++t) {
        current_statement__ = 60;
        if ((stan::math::primitive_value(
               stan::math::logical_gt(LEVEL_CALC_METHOD, 0))
            &&
            stan::math::primitive_value(
              stan::math::logical_gt(t, SEASONALITY)))) {
          current_statement__ = 59;
          movingSum = ((movingSum +
            (stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
            stan::model::rvalue(r, "r", stan::model::index_uni(t)))) -
            (stan::model::rvalue(y, "y",
               stan::model::index_uni((t - SEASONALITY)))
            -
            stan::model::rvalue(r, "r",
              stan::model::index_uni((t - SEASONALITY)))));
        }
        current_statement__ = 67;
        if (stan::math::logical_eq(SEASONALITY_TYPE, 0)) {
          current_statement__ = 64;
          stan::model::assign(expVal,
            ((stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))) *
            stan::model::rvalue(s, "s", stan::model::index_uni(t))) +
            stan::model::rvalue(r, "r", stan::model::index_uni(t))),
            "assigning variable expVal", stan::model::index_uni(t));
          current_statement__ = 65;
          newLevelP = ((stan::model::rvalue(y, "y", stan::model::index_uni(t))
            - stan::model::rvalue(r, "r", stan::model::index_uni(t))) /
            stan::model::rvalue(s, "s", stan::model::index_uni(t)));
        } else {
          current_statement__ = 61;
          stan::model::assign(expVal,
            ((stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))) +
            (stan::model::rvalue(s, "s", stan::model::index_uni(t)) *
            stan::math::pow(
              stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))),
              powSeason))) +
            stan::model::rvalue(r, "r", stan::model::index_uni(t))),
            "assigning variable expVal", stan::model::index_uni(t));
          current_statement__ = 62;
          newLevelP = ((stan::model::rvalue(y, "y", stan::model::index_uni(t))
            - stan::model::rvalue(r, "r", stan::model::index_uni(t))) -
            (stan::model::rvalue(s, "s", stan::model::index_uni(t)) *
            stan::math::pow(
              stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))),
              powSeason)));
        }
        current_statement__ = 80;
        if (stan::math::logical_eq(LEVEL_CALC_METHOD, 0)) {
          current_statement__ = 79;
          stan::model::assign(l, ((levSm * newLevelP) + ((1 - levSm) *
            stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))))),
            "assigning variable l", stan::model::index_uni(t));
        } else {
          current_statement__ = 78;
          if (stan::math::logical_eq(LEVEL_CALC_METHOD, 2)) {
            current_statement__ = 76;
            if (stan::math::logical_lte(t, SEASONALITY)) {
              current_statement__ = 75;
              stan::model::assign(l, ((levSm * newLevelP) + ((1 - levSm) *
                stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))))),
                "assigning variable l", stan::model::index_uni(t));
            } else {
              current_statement__ = 74;
              stan::model::assign(l, (((levSm * movingSum) / SEASONALITY) +
                ((1 - levSm) *
                stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))))),
                "assigning variable l", stan::model::index_uni(t));
            }
          } else {
            current_statement__ = 73;
            if (stan::math::logical_eq(LEVEL_CALC_METHOD, 3)) {
              current_statement__ = 68;
              stan::model::assign(l0, ((levSm * newLevelP) + ((1 - levSm) *
                stan::model::rvalue(l0, "l0", stan::model::index_uni((t - 1))))),
                "assigning variable l0", stan::model::index_uni(t));
              current_statement__ = 71;
              if (stan::math::logical_lte(t, SEASONALITY)) {
                current_statement__ = 70;
                stan::model::assign(l,
                  stan::model::rvalue(l0, "l0", stan::model::index_uni(t)),
                  "assigning variable l", stan::model::index_uni(t));
              } else {
                current_statement__ = 69;
                stan::model::assign(l, ((llevSm *
                  stan::model::rvalue(l0, "l0", stan::model::index_uni(t))) +
                  (((1 - llevSm) * movingSum) / SEASONALITY)),
                  "assigning variable l", stan::model::index_uni(t));
              }
            }
          }
        }
        current_statement__ = 85;
        if (stan::math::logical_eq(SEASONALITY_TYPE, 0)) {
          current_statement__ = 83;
          seasonalityP = (((sSm *
            (stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
            stan::model::rvalue(r, "r", stan::model::index_uni(t)))) /
            stan::model::rvalue(l, "l", stan::model::index_uni(t))) + ((1 -
            sSm) * stan::model::rvalue(s, "s", stan::model::index_uni(t))));
        } else {
          current_statement__ = 81;
          seasonalityP = (((sSm *
            ((stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
            stan::model::rvalue(l, "l", stan::model::index_uni(t))) -
            stan::model::rvalue(r, "r", stan::model::index_uni(t)))) /
            stan::math::pow(
              stan::model::rvalue(l, "l", stan::model::index_uni((t - 1))),
              powSeason))
            + ((1 - sSm) *
            stan::model::rvalue(s, "s", stan::model::index_uni(t))));
        }
        current_statement__ = 90;
        if (stan::math::logical_gt(fractSeasonality, 0)) {
          current_statement__ = 87;
          stan::model::assign(s, seasonalityP, "assigning variable s",
            stan::model::index_uni(((t + SEASONALITY) + 1)));
          current_statement__ = 88;
          stan::model::assign(s, ((fractSeasonality *
            stan::model::rvalue(s, "s",
              stan::model::index_uni((t + SEASONALITY)))) + ((1 -
            fractSeasonality) * seasonalityP)), "assigning variable s",
            stan::model::index_uni((t + SEASONALITY)));
        } else {
          current_statement__ = 86;
          stan::model::assign(s, seasonalityP, "assigning variable s",
            stan::model::index_uni((t + SEASONALITY)));
        }
        current_statement__ = 93;
        if (USE_SMOOTHED_ERROR) {
          current_statement__ = 92;
          stan::model::assign(smoothedInnovSize, ((innovSm *
            stan::math::abs(
              (stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
              stan::model::rvalue(expVal, "expVal", stan::model::index_uni(t)))))
            + ((1 - innovSm) *
            stan::model::rvalue(smoothedInnovSize, "smoothedInnovSize",
              stan::model::index_uni((t - 1))))),
            "assigning variable smoothedInnovSize", stan::model::index_uni(t));
        } else {
          current_statement__ = 91;
          stan::model::assign(smoothedInnovSize, 1,
            "assigning variable smoothedInnovSize", stan::model::index_uni(t));
        }
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "powTrend", powTrend,
        MIN_POW_TREND);
      current_statement__ = 16;
      stan::math::check_less_or_equal(function__, "powTrend", powTrend,
        MAX_POW_TREND);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "l", l, 0);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "l0", l0, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "expVal", expVal, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "smoothedInnovSize",
        smoothedInnovSize, 0);
      if (emit_transformed_parameters__) {
        out__.write(powTrend);
        out__.write(l);
        out__.write(l0);
        out__.write(s);
        out__.write(r);
        out__.write(expVal);
        out__.write(smoothedInnovSize);
        out__.write(seasonalityP);
        out__.write(sumsu);
        out__.write(newLevelP);
        out__.write(movingSum);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> regCoef =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(regCoef,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable regCoef");
      out__.write(regCoef);
      local_scalar_t__ regOffset = DUMMY_VAR__;
      current_statement__ = 2;
      regOffset = in__.read<local_scalar_t__>();
      out__.write(regOffset);
      local_scalar_t__ nu = DUMMY_VAR__;
      current_statement__ = 3;
      nu = in__.read<local_scalar_t__>();
      out__.write_free_lub(MIN_NU, MAX_NU, nu);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ levSm = DUMMY_VAR__;
      current_statement__ = 5;
      levSm = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, levSm);
      local_scalar_t__ llevSm = DUMMY_VAR__;
      current_statement__ = 6;
      llevSm = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, llevSm);
      local_scalar_t__ sSm = DUMMY_VAR__;
      current_statement__ = 7;
      sSm = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, sSm);
      local_scalar_t__ powx = DUMMY_VAR__;
      current_statement__ = 8;
      powx = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, powx);
      local_scalar_t__ powTrendBeta = DUMMY_VAR__;
      current_statement__ = 9;
      powTrendBeta = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, powTrendBeta);
      local_scalar_t__ coefTrend = DUMMY_VAR__;
      current_statement__ = 10;
      coefTrend = in__.read<local_scalar_t__>();
      out__.write(coefTrend);
      local_scalar_t__ offsetSigma = DUMMY_VAR__;
      current_statement__ = 11;
      offsetSigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(MIN_SIGMA, offsetSigma);
      local_scalar_t__ innovSm = DUMMY_VAR__;
      current_statement__ = 12;
      innovSm = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, innovSm);
      local_scalar_t__ innovSizeInit = DUMMY_VAR__;
      current_statement__ = 13;
      innovSizeInit = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, innovSizeInit);
      Eigen::Matrix<local_scalar_t__,-1,1> initS =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(SEASONALITY,
          DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(initS,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(SEASONALITY),
        "assigning variable initS");
      out__.write(initS);
      local_scalar_t__ powSeason = DUMMY_VAR__;
      current_statement__ = 15;
      powSeason = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, powSeason);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "regCoef",
        "double", std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "regOffset",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "nu", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "levSm", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "llevSm", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sSm", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "powx", "double",
        std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "powTrendBeta",
        "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "coefTrend",
        "double", std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "offsetSigma",
        "double", std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "innovSm",
        "double", std::vector<size_t>{});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "innovSizeInit",
        "double", std::vector<size_t>{});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "initS", "double",
        std::vector<size_t>{static_cast<size_t>(SEASONALITY)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "powSeason",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> regCoef =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> regCoef_flat__;
        current_statement__ = 1;
        regCoef_flat__ = context__.vals_r("regCoef");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(regCoef, regCoef_flat__[(pos__ - 1)],
            "assigning variable regCoef", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(regCoef);
      local_scalar_t__ regOffset = DUMMY_VAR__;
      current_statement__ = 2;
      regOffset = context__.vals_r("regOffset")[(1 - 1)];
      out__.write(regOffset);
      local_scalar_t__ nu = DUMMY_VAR__;
      current_statement__ = 3;
      nu = context__.vals_r("nu")[(1 - 1)];
      out__.write_free_lub(MIN_NU, MAX_NU, nu);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      local_scalar_t__ levSm = DUMMY_VAR__;
      current_statement__ = 5;
      levSm = context__.vals_r("levSm")[(1 - 1)];
      out__.write_free_lub(0, 1, levSm);
      local_scalar_t__ llevSm = DUMMY_VAR__;
      current_statement__ = 6;
      llevSm = context__.vals_r("llevSm")[(1 - 1)];
      out__.write_free_lub(0, 1, llevSm);
      local_scalar_t__ sSm = DUMMY_VAR__;
      current_statement__ = 7;
      sSm = context__.vals_r("sSm")[(1 - 1)];
      out__.write_free_lub(0, 1, sSm);
      local_scalar_t__ powx = DUMMY_VAR__;
      current_statement__ = 8;
      powx = context__.vals_r("powx")[(1 - 1)];
      out__.write_free_lub(0, 1, powx);
      local_scalar_t__ powTrendBeta = DUMMY_VAR__;
      current_statement__ = 9;
      powTrendBeta = context__.vals_r("powTrendBeta")[(1 - 1)];
      out__.write_free_lub(0, 1, powTrendBeta);
      local_scalar_t__ coefTrend = DUMMY_VAR__;
      current_statement__ = 10;
      coefTrend = context__.vals_r("coefTrend")[(1 - 1)];
      out__.write(coefTrend);
      local_scalar_t__ offsetSigma = DUMMY_VAR__;
      current_statement__ = 11;
      offsetSigma = context__.vals_r("offsetSigma")[(1 - 1)];
      out__.write_free_lb(MIN_SIGMA, offsetSigma);
      local_scalar_t__ innovSm = DUMMY_VAR__;
      current_statement__ = 12;
      innovSm = context__.vals_r("innovSm")[(1 - 1)];
      out__.write_free_lub(0, 1, innovSm);
      local_scalar_t__ innovSizeInit = DUMMY_VAR__;
      current_statement__ = 13;
      innovSizeInit = context__.vals_r("innovSizeInit")[(1 - 1)];
      out__.write_free_lb(0, innovSizeInit);
      Eigen::Matrix<local_scalar_t__,-1,1> initS =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(SEASONALITY,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> initS_flat__;
        current_statement__ = 14;
        initS_flat__ = context__.vals_r("initS");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= SEASONALITY; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(initS, initS_flat__[(pos__ - 1)],
            "assigning variable initS", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(initS);
      local_scalar_t__ powSeason = DUMMY_VAR__;
      current_statement__ = 15;
      powSeason = context__.vals_r("powSeason")[(1 - 1)];
      out__.write_free_lub(0, 1, powSeason);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"regCoef", "regOffset", "nu", "sigma",
                "levSm", "llevSm", "sSm", "powx", "powTrendBeta",
                "coefTrend", "offsetSigma", "innovSm", "innovSizeInit",
                "initS", "powSeason"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"powTrend", "l", "l0", "s", "r", "expVal", "smoothedInnovSize",
             "seasonalityP", "sumsu", "newLevelP", "movingSum"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(J)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(SEASONALITY)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(s_1dim__)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "regCoef" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "regOffset");
    param_names__.emplace_back(std::string() + "nu");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "levSm");
    param_names__.emplace_back(std::string() + "llevSm");
    param_names__.emplace_back(std::string() + "sSm");
    param_names__.emplace_back(std::string() + "powx");
    param_names__.emplace_back(std::string() + "powTrendBeta");
    param_names__.emplace_back(std::string() + "coefTrend");
    param_names__.emplace_back(std::string() + "offsetSigma");
    param_names__.emplace_back(std::string() + "innovSm");
    param_names__.emplace_back(std::string() + "innovSizeInit");
    for (int sym1__ = 1; sym1__ <= SEASONALITY; ++sym1__) {
      param_names__.emplace_back(std::string() + "initS" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "powSeason");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "powTrend");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "l" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "l0" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= s_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "s" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "r" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "expVal" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "smoothedInnovSize" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "seasonalityP");
      param_names__.emplace_back(std::string() + "sumsu");
      param_names__.emplace_back(std::string() + "newLevelP");
      param_names__.emplace_back(std::string() + "movingSum");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "regCoef" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "regOffset");
    param_names__.emplace_back(std::string() + "nu");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "levSm");
    param_names__.emplace_back(std::string() + "llevSm");
    param_names__.emplace_back(std::string() + "sSm");
    param_names__.emplace_back(std::string() + "powx");
    param_names__.emplace_back(std::string() + "powTrendBeta");
    param_names__.emplace_back(std::string() + "coefTrend");
    param_names__.emplace_back(std::string() + "offsetSigma");
    param_names__.emplace_back(std::string() + "innovSm");
    param_names__.emplace_back(std::string() + "innovSizeInit");
    for (int sym1__ = 1; sym1__ <= SEASONALITY; ++sym1__) {
      param_names__.emplace_back(std::string() + "initS" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "powSeason");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "powTrend");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "l" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "l0" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= s_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "s" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "r" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "expVal" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "smoothedInnovSize" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "seasonalityP");
      param_names__.emplace_back(std::string() + "sumsu");
      param_names__.emplace_back(std::string() + "newLevelP");
      param_names__.emplace_back(std::string() + "movingSum");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"regCoef\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"regOffset\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"levSm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"llevSm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sSm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"powx\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"powTrendBeta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coefTrend\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offsetSigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"innovSm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"innovSizeInit\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"initS\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(SEASONALITY) + "},\"block\":\"parameters\"},{\"name\":\"powSeason\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"powTrend\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"l\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"l0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"expVal\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"smoothedInnovSize\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"seasonalityP\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sumsu\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"newLevelP\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"movingSum\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"regCoef\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"regOffset\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"levSm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"llevSm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sSm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"powx\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"powTrendBeta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coefTrend\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offsetSigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"innovSm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"innovSizeInit\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"initS\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(SEASONALITY) + "},\"block\":\"parameters\"},{\"name\":\"powSeason\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"powTrend\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"l\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"l0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"expVal\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"smoothedInnovSize\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"seasonalityP\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sumsu\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"newLevelP\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"movingSum\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((J + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + 1) + 1) + 1) + SEASONALITY) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((((((1
      + N) + N) + s_1dim__) + N) + N) + N) + 1) + 1) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((J + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + 1) + 1) + 1) + SEASONALITY) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((((((1
      + N) + N) + s_1dim__) + N) + N) + N) + 1) + 1) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_noglobalSGT_namespace::model_noglobalSGT;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_noglobalSGT_namespace::profiles__;
}
#endif
#endif
